{"version":3,"file":"stripe.js","sources":["../../src/services/stripe.js"],"sourcesContent":["/* global StripeCheckout */\nimport Service from '@ember/service';\nimport { cached } from '@glimmer/tracking';\nimport { getOwner } from '@ember/application';\nimport { loadScript } from '../utils/load-script.js';\nimport { compactOptions } from '../utils/configuration-options.js';\n\nconst STRIPE_CHECKOUT_SCRIPT_URL = 'https://checkout.stripe.com/checkout.js';\nlet stripeCheckoutScript;\n\nexport default class StripeService extends Service {\n  @cached\n  get config() {\n    return (\n      compactOptions(\n        getOwner(this).resolveRegistration('config:environment').stripe,\n      ) || {}\n    );\n  }\n\n  async open(config = {}, onScriptLoad, onScriptError) {\n    await this.loadStripeCheckout(onScriptLoad, onScriptError);\n\n    const fullConfig = this.#fullConfig(config);\n    if (!('key' in fullConfig)) {\n      throw new Error('[ember-cli-stripe] Missing required `key` param!');\n    }\n\n    StripeCheckout.open(fullConfig);\n  }\n\n  loadStripeCheckout(onScriptLoad, onScriptError) {\n    if (stripeCheckoutScript) {\n      return stripeCheckoutScript;\n    }\n\n    stripeCheckoutScript = loadScript(STRIPE_CHECKOUT_SCRIPT_URL, {\n      onLoad: onScriptLoad,\n      onError: onScriptError,\n    });\n    return stripeCheckoutScript;\n  }\n\n  /**\n   * Final Stripe config options with env configs merged with the ones provided explicltly on checkout open.\n   */\n  #fullConfig(config) {\n    return Object.assign(\n      {\n        token: config.onToken,\n        opened: () => config.onOpened?.(),\n        closed: () => config.onClosed?.(),\n      },\n      this.config,\n      compactOptions(config),\n    );\n  }\n}\n"],"names":["STRIPE_CHECKOUT_SCRIPT_URL","stripeCheckoutScript","StripeService","Service","config","compactOptions","getOwner","resolveRegistration","stripe","n","prototype","cached","open","onScriptLoad","onScriptError","loadStripeCheckout","fullConfig","Error","StripeCheckout","loadScript","onLoad","onError","#fullConfig","Object","assign","token","onToken","opened","onOpened","closed","onClosed"],"mappings":";;;;;;;AAAA;AAOA,MAAMA,0BAA0B,GAAG,yCAAyC;AAC5E,IAAIC,oBAAoB;AAET,MAAMC,aAAa,SAASC,OAAO,CAAC;EACjD,IACIC,MAAMA,GAAG;AACX,IAAA,OACEC,cAAc,CACZC,QAAQ,CAAC,IAAI,CAAC,CAACC,mBAAmB,CAAC,oBAAoB,CAAC,CAACC,MAC3D,CAAC,IAAI,EAAE;AAEX;AAAC,EAAA;IAAAC,CAAA,CAAA,IAAA,CAAAC,SAAA,EAAA,QAAA,EAAA,CAPAC,MAAM,CAAA,CAAA;AAAA;EASP,MAAMC,IAAIA,CAACR,MAAM,GAAG,EAAE,EAAES,YAAY,EAAEC,aAAa,EAAE;AACnD,IAAA,MAAM,IAAI,CAACC,kBAAkB,CAACF,YAAY,EAAEC,aAAa,CAAC;IAE1D,MAAME,UAAU,GAAG,IAAI,CAAC,WAAW,CAACZ,MAAM,CAAC;AAC3C,IAAA,IAAI,EAAE,KAAK,IAAIY,UAAU,CAAC,EAAE;AAC1B,MAAA,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;AACrE;AAEAC,IAAAA,cAAc,CAACN,IAAI,CAACI,UAAU,CAAC;AACjC;AAEAD,EAAAA,kBAAkBA,CAACF,YAAY,EAAEC,aAAa,EAAE;AAC9C,IAAA,IAAIb,oBAAoB,EAAE;AACxB,MAAA,OAAOA,oBAAoB;AAC7B;AAEAA,IAAAA,oBAAoB,GAAGkB,UAAU,CAACnB,0BAA0B,EAAE;AAC5DoB,MAAAA,MAAM,EAAEP,YAAY;AACpBQ,MAAAA,OAAO,EAAEP;AACX,KAAC,CAAC;AACF,IAAA,OAAOb,oBAAoB;AAC7B;;AAEA;AACF;AACA;EACE,WAAWqB,CAAClB,MAAM,EAAE;IAClB,OAAOmB,MAAM,CAACC,MAAM,CAClB;MACEC,KAAK,EAAErB,MAAM,CAACsB,OAAO;AACrBC,MAAAA,MAAM,EAAEA,MAAMvB,MAAM,CAACwB,QAAQ,IAAI;AACjCC,MAAAA,MAAM,EAAEA,MAAMzB,MAAM,CAAC0B,QAAQ;KAC9B,EACD,IAAI,CAAC1B,MAAM,EACXC,cAAc,CAACD,MAAM,CACvB,CAAC;AACH;AACF;;;;"}
{"version":3,"file":"stripe-checkout.js","sources":["../../src/components/stripe-checkout.gjs"],"sourcesContent":["import Component from '@glimmer/component';\nimport { inject as service } from '@ember/service';\nimport { on } from '@ember/modifier';\nimport {\n  configurationOptions,\n  compactOptions,\n} from '../utils/configuration-options.js';\nimport { modifier } from 'ember-modifier';\n\n/**\n * Stripe checkout component for accepting payments with\n * an embedded form.\n *\n * Stripe docs: https://stripe.com/docs/tutorials/checkout\n * List of possible Stripe options: ../utils/configuration-options.js\n *\n * Usage:\n * <StripeCheckout\n *   @description={{billingPlan.description}}\n *   @amount={{billingPlan.amount}}\n *   @onToken={{this.handleToken}}\n *   @onOpened={{this.handleOpened}}\n *   @onClosed={{this.handleClosed}}\n * />\n *\n */\nexport default class StripeCheckout extends Component {\n  @service stripe;\n\n  /**\n   * Stripe checkout button text.\n   */\n  get label() {\n    return this.args.label ?? 'Pay with card';\n  }\n\n  get stripeConfig() {\n    return {\n      ...compactOptions(\n        Object.fromEntries(\n          configurationOptions.map((key) => [key, this.args[key]]),\n        ),\n      ),\n      onToken: this.args.onToken,\n      onOpened: this.args.onOpened,\n      onClosed: this.args.onClosed,\n    };\n  }\n\n  handleClick = () => {\n    this.stripe.open(this.stripeConfig);\n  };\n\n  autoOpenCheckout = modifier((element, [autoOpen]) => {\n    if (autoOpen) {\n      this.handleClick();\n    }\n  });\n\n  <template>\n    <button\n      class=\"stripe-checkout\"\n      type=\"button\"\n      disabled={{@isDisabled}}\n      {{this.autoOpenCheckout @showCheckout}}\n      {{on \"click\" this.handleClick}}\n    >\n      {{#if (has-block)}}\n        {{yield}}\n      {{else}}\n        {{this.label}}\n      {{/if}}\n    </button>\n  </template>\n}\n"],"names":["StripeCheckout","Component","g","prototype","service","i","void 0","label","args","stripeConfig","compactOptions","Object","fromEntries","configurationOptions","map","key","onToken","onOpened","onClosed","handleClick","stripe","open","autoOpenCheckout","modifier","element","autoOpen","setComponentTemplate","precompileTemplate","strictMode","scope","on"],"mappings":";;;;;;;;;AA0Be,MAAMA,cAAuB,SAAAC,SAAA,CAAA;AAAA,EAAA;IAAAC,CAAA,CAAA,IAAA,CAAAC,SAAA,EAAA,QAAA,EAAA,CACzCC,MAAA,CAAA,CAAA;AAAA;AAAA,EAAA,OAAA,IAAAC,CAAA,CAAA,IAAA,EAAA,QAAA,CAAA,EAAAC,MAAA;AAED;;AAEC;EACD,IAAIC,KAAQA,GAAA;AACV,IAAA,OAAO,IAAI,CAACC,IAAI,CAACD,KAAK,IAAI,eAAA;AAC5B;EAEA,IAAIE,YAAeA,GAAA;IACjB,OAAO;MACL,GAAGC,cAAA,CACDC,OAAOC,WAAW,CAChBC,qBAAqBC,GAAG,CAAEC,GAAQ,IAAA,CAACA,GAAA,EAAK,IAAI,CAACP,IAAI,CAACO,GAAI,CAAA,CAAC,CAE1D,CAAA,CAAA;AACDC,MAAAA,OAAA,EAAS,IAAI,CAACR,IAAI,CAACQ,OAAO;AAC1BC,MAAAA,QAAA,EAAU,IAAI,CAACT,IAAI,CAACS,QAAQ;AAC5BC,MAAAA,QAAA,EAAU,IAAI,CAACV,IAAI,CAACU;KACtB;AACF;EAEAC,WAAc,GAAAA,MAAA;IACZ,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACZ,YAAY,CAAA;GAClC;EAEFa,gBAAA,GAAmBC,QAAS,CAAA,CAACC,OAAS,EAAA,CAACC,QAAS,CAAA,KAAA;AAC9C,IAAA,IAAIA,QAAU,EAAA;MACZ,IAAI,CAACN,WAAW,EAAA;AAClB;AACF,GAAG,CAAA;AAEH,EAAA;IAAAO,oBAAA,CAAAC,kBAAA,CAcA,qRAAA,EAAA;MAAAC,UAAA,EAAA,IAAA;AAAAC,MAAAA,KAAA,EAAAA,OAAA;AAAAC,QAAAA;AAAA,OAAA;KAAU,CAAA,EAAV,IAAW,CAAA;AAAD;AACZ;;;;"}